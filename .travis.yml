## Documentation: http://docs.travis-ci.com/user/languages/julia/
language: julia
os:
  - linux
#  - osx
julia:
  - 0.6
#  - nightly
notifications:
  email: false
git:
  depth: 99999999

before_install:
  # Update Julia packages metadata.
  - julia -e 'Pkg.update()'
  # Use PyPlot's Automated Matplotlib installation through Conda.
  # Work around (part 1/2) matplotlib backend error leading to "matplotlib.pyplot could not be found by pyimport": can't just set env PYTHON="".
  - julia -e 'ENV["PYTHON"]=""; Pkg.add("Conda"); using Conda; Conda.update(); Conda.add("matplotlib"); Pkg.add("PyCall"); Pkg.build("PyCall"); Pkg.add("PyPlot");'
## uncomment the following lines to allow failures on nightly julia
## (tests will run but not make your overall status red)
# matrix:
#   allow_failures:
#   - julia: nightly
#   include:
#    - os: linux
#      sudo: required  # Gtk needs to apt-get install
#      before_script:  # Using xvfb to run tests that require a GUI
#        - "export DISPLAY=:99.0"
#        - "sh -e /etc/init.d/xvfb start"
#        - sleep 3 # Give xvfb some time to start
#    - os: osx

## uncomment and modify the following lines to manually install system packages
#addons:
#  apt: # apt-get for linux
#    packages:
#    - gfortran
#before_script:
#  - julia -e 'ENV["PYTHON"]=""; Pkg.add("Conda"); using Conda; Conda.add("matplotlib"); Pkg.add("PyCall"); Pkg.build("PyCall"); Pkg.add("PyPlot"); Pkg.build("PyPlot")'

## uncomment the following lines to override the default test script
script:
  # - julia -e 'ENV["PYTHON"]=""; Pkg.add("Conda"); using Conda; Conda.add("matplotlib"); Pkg.add("PyCall"); Pkg.build("PyCall"); Pkg.add("PyPlot"); Pkg.build("PyPlot")'
   # Work around (part 2/2) matplotlib backend error leading to "matplotlib.pyplot could not be found by pyimport": point LD_LIBRARY_PATH to Conda libs.
   - export LD_LIBRARY_PATH=$HOME/.julia/v0.6/Conda/deps/usr/lib; julia -e 'Pkg.clone(pwd()); Pkg.build("SOM"); Pkg.test("SOM"; coverage=true)'
  # - julia -e 'Pkg.clone(pwd()); Pkg.build("SOM"); Pkg.test("SOM"; coverage=true)'
after_success:
  # push coverage results to Coveralls
  # - julia -e 'cd(Pkg.dir("SOM")); Pkg.add("Coverage"); using Coverage; Coveralls.submit(Coveralls.process_folder())'
  # push coverage results to Codecov
  # - julia -e 'cd(Pkg.dir("SOM")); Pkg.add("Coverage"); using Coverage; Codecov.submit(Codecov.process_folder())'
  # Documentation only:
  - julia -e julia -e 'Pkg.add("Documenter")'
  - julia -e 'cd(Pkg.dir("SOM")); include(joinpath("docs", "make.jl"))'
