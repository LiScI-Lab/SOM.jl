{
    "docs": [
        {
            "location": "/",
            "text": "SOM.jl - Kohonen's self-organising maps for Julia\n\n\nSome text describing the package.\n\n\n\n\nSelf-organising maps\n\n\nRefer to T. Kohonen papers.\n\n\n\n\nConcept\n\n\nfollows Kohonen's SOM_PAK.\n\n\n\n\nTutorials\n\n\n\n\nAPI\n\n\n\n\nIndex\n\n\n\n\nSOM.Som\n\n\nSOM.initSOM\n\n\nSOM.trainSOM",
            "title": "Introduction"
        },
        {
            "location": "/#somjl-kohonens-self-organising-maps-for-julia",
            "text": "Some text describing the package.",
            "title": "SOM.jl - Kohonen's self-organising maps for Julia"
        },
        {
            "location": "/#self-organising-maps",
            "text": "Refer to T. Kohonen papers.",
            "title": "Self-organising maps"
        },
        {
            "location": "/#concept",
            "text": "follows Kohonen's SOM_PAK.",
            "title": "Concept"
        },
        {
            "location": "/#tutorials",
            "text": "",
            "title": "Tutorials"
        },
        {
            "location": "/#api",
            "text": "",
            "title": "API"
        },
        {
            "location": "/#index",
            "text": "SOM.Som  SOM.initSOM  SOM.trainSOM",
            "title": "Index"
        },
        {
            "location": "/tutorials/firstTutorial/",
            "text": "bla bla bla",
            "title": "First Tutorial"
        },
        {
            "location": "/api/types/",
            "text": "Types\n\n\n#\n\n\nSOM.Som\n \u2014 \nType\n.\n\n\nstruct Som\n\n\n\n\n\nStored data of a trained SOM.\n\n\nFields:\n\n\n\n\ncodes\n: 2D-array of codebook vectors. One vector per row\n\n\ncolNames\n: names of the attribute with which the SOM is trained\n\n\nnormParams\n: DataFrame with normalisation parameters for each column               of training data. Column headers corresponds with               colNames.\n\n\nnorm\n: normalisation of training data; one of \n:none, :minmax, :zscore\n\n\nxdim\n: number of neurons in x-direction\n\n\nydim\n: number of neurons in y-direction\n\n\nnCodes\n: total number of neurons\n\n\ngrid\n: 2D-array of coordinates of neurons on the map         (2 columns (x,y)] for rectangular and hexagonal maps          3 columns (x,y,z) for spherical maps)\n\n\nindices\n: 2D-array of indices of the neurons\n\n\ntopol\n: topology of the SOM; one of \n:rectangular, :hexagonal, :spherical\n\n\ntoroidal\n: if \ntrue\n, the SOM is toroidal (no edges)\n\n\npopulation\n: 1D-array of numbers of training samples mapped to               each neuron.\n\n\n\n\nsource",
            "title": "Types"
        },
        {
            "location": "/api/soms/",
            "text": "SOM training\n\n\n#\n\n\nSOM.initSOM\n \u2014 \nFunction\n.\n\n\ninitSOM(train, xdim, ydim = xdim;  norm = :zscore, topol = :hexagonal,\n        toroidal = false)\n\n\n\n\n\nInitialises a SOM.\n\n\nArguments:\n\n\n\n\ntrain\n: training data, must be convertable to Array{Float64,2}.\n\n\nxdim, ydim\n: geometry of the SOM          If DataFrame, the column names will be used as attribute names.          Codebook vectors will be sampled from the training data.          for spherical SOMs ydim can be omitted.\n\n\nnorm\n: optional normalisation; one of :\nminmax, :zscore or :none\n\n\ntopol\n: topology of the SOM; one of \n:rectangular, :hexagonal or :spherical\n.\n\n\ntoroidal\n: optional flag; if true, the SOM is toroidal.\n\n\n\n\nsource\n\n\n#\n\n\nSOM.trainSOM\n \u2014 \nFunction\n.\n\n\ntrainSOM\n(\nsom\n::\nSom\n,\n \ntrain\n::\nAny\n,\n \nlen\n;\n\n         \n\u03b7\n \n=\n \n0\n.\n2\n \nkernel\n \n=\n \ngaussianKernel\n,\n\n         \nr\n \n=\n \n0\n.\n0\n,\n \nrDecay\n \n=\n \ntrue\n,\n \n\u03b7Decay\n \n=\n \ntrue\n)\n\n\n\n\n\n\nTrain an initialised or pre-trained SOM.\n\n\nArguments:\n\n\n\n\nsom\n: object of type Som with a trained som\n\n\ntrain\n: training DataType\n\n\nlen\n: number of training steps (\nnot\n epochs)\n\n\n\u03b7\n: learning rate. \u03b7 decays to 0.0 during the training\n\n\nkernel\n: optional distance kernel; one of (\nbubbleKernel, gaussianKernel\n)           default is \ngaussianKernel\n\n\nr\n: optional training radius.      If r is not specified, it defaults to \u221a(xdim^2 + ydim^2) / 2\n\n\nrDecay\n: optional flag; if true, r decays to 0.0 during the training.\n\n\n\u03b7Decay\n: optional flag; if true, learning rate \u03b7 decays to 0.0           during the training.\n\n\n\n\nsource",
            "title": "Training"
        },
        {
            "location": "/api/visualisations/",
            "text": "Visualisation",
            "title": "Visualisation"
        }
    ]
}