{
    "docs": [
        {
            "location": "/",
            "text": "SOM.jl - Kohonen's self-organising maps for Julia\n\n\nSome text describing the package.\n\n\n\n\nSelf-organising maps\n\n\nRefer to T. Kohonen papers.\n\n\n\n\nConcept\n\n\nfollows Kohonen's SOM_PAK.\n\n\n\n\nTutorials\n\n\n\n\nAPI\n\n\n\n\nTypes\n\n\nTraining\n\n\nVisualisation\n\n\n\n\n\n\nIndex\n\n\n\n\nSOM.Som\n\n\nSOM.classFrequencies\n\n\nSOM.initSOM\n\n\nSOM.mapToSOM\n\n\nSOM.plotClasses\n\n\nSOM.plotDensity\n\n\nSOM.trainSOM",
            "title": "Introduction"
        },
        {
            "location": "/#somjl-kohonens-self-organising-maps-for-julia",
            "text": "Some text describing the package.",
            "title": "SOM.jl - Kohonen's self-organising maps for Julia"
        },
        {
            "location": "/#self-organising-maps",
            "text": "Refer to T. Kohonen papers.",
            "title": "Self-organising maps"
        },
        {
            "location": "/#concept",
            "text": "follows Kohonen's SOM_PAK.",
            "title": "Concept"
        },
        {
            "location": "/#tutorials",
            "text": "",
            "title": "Tutorials"
        },
        {
            "location": "/#api",
            "text": "Types  Training  Visualisation",
            "title": "API"
        },
        {
            "location": "/#index",
            "text": "SOM.Som  SOM.classFrequencies  SOM.initSOM  SOM.mapToSOM  SOM.plotClasses  SOM.plotDensity  SOM.trainSOM",
            "title": "Index"
        },
        {
            "location": "/tutorials/firstTutorial/",
            "text": "bla bla bla",
            "title": "Quick Start Tutorial"
        },
        {
            "location": "/api/types/",
            "text": "Types\n\n\n#\n\n\nSOM.Som\n \u2014 \nType\n.\n\n\nstruct Som\n\n\n\n\n\nStored data of a trained SOM.\n\n\nFields:\n\n\n\n\ncodes\n: 2D-array of codebook vectors. One vector per row\n\n\ncolNames\n: names of the attribute with which the SOM is trained\n\n\nnormParams\n: DataFrame with normalisation parameters for each column               of training data. Column headers corresponds with               colNames.\n\n\nnorm\n: normalisation of training data; one of \n:none, :minmax, :zscore\n\n\nxdim\n: number of neurons in x-direction\n\n\nydim\n: number of neurons in y-direction\n\n\nnCodes\n: total number of neurons\n\n\ngrid\n: 2D-array of coordinates of neurons on the map         (2 columns (x,y)] for rectangular and hexagonal maps          3 columns (x,y,z) for spherical maps)\n\n\nindices\n: 2D-array of indices of the neurons\n\n\ntopol\n: topology of the SOM; one of \n:rectangular, :hexagonal, :spherical\n\n\ntoroidal\n: if \ntrue\n, the SOM is toroidal (no edges)\n\n\npopulation\n: 1D-array of numbers of training samples mapped to               each neuron.\n\n\n\n\nsource",
            "title": "Types"
        },
        {
            "location": "/api/types/#types",
            "text": "#  SOM.Som  \u2014  Type .  struct Som  Stored data of a trained SOM.  Fields:   codes : 2D-array of codebook vectors. One vector per row  colNames : names of the attribute with which the SOM is trained  normParams : DataFrame with normalisation parameters for each column               of training data. Column headers corresponds with               colNames.  norm : normalisation of training data; one of  :none, :minmax, :zscore  xdim : number of neurons in x-direction  ydim : number of neurons in y-direction  nCodes : total number of neurons  grid : 2D-array of coordinates of neurons on the map         (2 columns (x,y)] for rectangular and hexagonal maps          3 columns (x,y,z) for spherical maps)  indices : 2D-array of indices of the neurons  topol : topology of the SOM; one of  :rectangular, :hexagonal, :spherical  toroidal : if  true , the SOM is toroidal (no edges)  population : 1D-array of numbers of training samples mapped to               each neuron.   source",
            "title": "Types"
        },
        {
            "location": "/api/soms/",
            "text": "Training\n\n\n#\n\n\nSOM.initSOM\n \u2014 \nFunction\n.\n\n\ninitSOM(train, xdim, ydim = xdim;  norm = :zscore, topol = :hexagonal,\n        toroidal = false)\n\n\n\n\n\nInitialises a SOM.\n\n\nArguments:\n\n\n\n\ntrain\n: training data, must be convertable to Array{Float64,2}.\n\n\nxdim, ydim\n: geometry of the SOM          If DataFrame, the column names will be used as attribute names.          Codebook vectors will be sampled from the training data.          for spherical SOMs ydim can be omitted.\n\n\nnorm\n: optional normalisation; one of :\nminmax, :zscore or :none\n\n\ntopol\n: topology of the SOM; one of \n:rectangular, :hexagonal or :spherical\n.\n\n\ntoroidal\n: optional flag; if true, the SOM is toroidal.\n\n\n\n\nsource\n\n\n#\n\n\nSOM.trainSOM\n \u2014 \nFunction\n.\n\n\ntrainSOM\n(\nsom\n::\nSom\n,\n \ntrain\n::\nAny\n,\n \nlen\n;\n\n         \n\u03b7\n \n=\n \n0\n.\n2\n \nkernel\n \n=\n \ngaussianKernel\n,\n\n         \nr\n \n=\n \n0\n.\n0\n,\n \nrDecay\n \n=\n \ntrue\n,\n \n\u03b7Decay\n \n=\n \ntrue\n)\n\n\n\n\n\n\nTrain an initialised or pre-trained SOM.\n\n\nArguments:\n\n\n\n\nsom\n: object of type Som with a trained som\n\n\ntrain\n: training DataType\n\n\nlen\n: number of training steps (\nnot\n epochs)\n\n\n\u03b7\n: learning rate. \u03b7 decays to 0.0 during the training\n\n\nkernel\n: optional distance kernel; one of (\nbubbleKernel, gaussianKernel\n)           default is \ngaussianKernel\n\n\nr\n: optional training radius.      If r is not specified, it defaults to \u221a(xdim^2 + ydim^2) / 2\n\n\nrDecay\n: optional flag; if true, r decays to 0.0 during the training.\n\n\n\u03b7Decay\n: optional flag; if true, learning rate \u03b7 decays to 0.0           during the training.\n\n\n\n\nsource\n\n\n#\n\n\nSOM.mapToSOM\n \u2014 \nFunction\n.\n\n\nmapToSOM(som::Som, data)\n\n\n\n\n\nReturn a DataFrame with X-, Y-indices and index of winner neuron for every row in data.\n\n\nData must have the same number of dimensions as the training dataset.\n\n\nArguments\n\n\n\n\nsom\n: a trained SOM\n\n\ndata\n: Array or DataFrame with training data.\n\n\n\n\nsource\n\n\n#\n\n\nSOM.classFrequencies\n \u2014 \nFunction\n.\n\n\nclassFrequencies\n(\nsom::Som\n, \ndata\n, \nclasses\n)\n\n\n\n\n\nReturn a DataFrame with class frequencies for all neurons.\n\n\nArguments:\n\n\n\n\nsom\n: a trained SOM\n\n\ndata\n: data with row-wise samples and class information in each row\n\n\nclasses\n: Name of column with class information.\n\n\n\n\nData must have the same number of dimensions as the training dataset. The column with class labels is given as \nclasses\n (name or index). Returned DataFrame has the columns:\n\n\n\n\nX-, Y-indices and index: of winner neuron for every row in data\n\n\npopulation: number of samples mapped to the neuron\n\n\nfrequencies: one column for each class label.\n\n\n\n\nsource",
            "title": "Training"
        },
        {
            "location": "/api/soms/#training",
            "text": "#  SOM.initSOM  \u2014  Function .  initSOM(train, xdim, ydim = xdim;  norm = :zscore, topol = :hexagonal,\n        toroidal = false)  Initialises a SOM.  Arguments:   train : training data, must be convertable to Array{Float64,2}.  xdim, ydim : geometry of the SOM          If DataFrame, the column names will be used as attribute names.          Codebook vectors will be sampled from the training data.          for spherical SOMs ydim can be omitted.  norm : optional normalisation; one of : minmax, :zscore or :none  topol : topology of the SOM; one of  :rectangular, :hexagonal or :spherical .  toroidal : optional flag; if true, the SOM is toroidal.   source  #  SOM.trainSOM  \u2014  Function .  trainSOM ( som :: Som ,   train :: Any ,   len ; \n          \u03b7   =   0 . 2   kernel   =   gaussianKernel , \n          r   =   0 . 0 ,   rDecay   =   true ,   \u03b7Decay   =   true )   Train an initialised or pre-trained SOM.  Arguments:   som : object of type Som with a trained som  train : training DataType  len : number of training steps ( not  epochs)  \u03b7 : learning rate. \u03b7 decays to 0.0 during the training  kernel : optional distance kernel; one of ( bubbleKernel, gaussianKernel )           default is  gaussianKernel  r : optional training radius.      If r is not specified, it defaults to \u221a(xdim^2 + ydim^2) / 2  rDecay : optional flag; if true, r decays to 0.0 during the training.  \u03b7Decay : optional flag; if true, learning rate \u03b7 decays to 0.0           during the training.   source  #  SOM.mapToSOM  \u2014  Function .  mapToSOM(som::Som, data)  Return a DataFrame with X-, Y-indices and index of winner neuron for every row in data.  Data must have the same number of dimensions as the training dataset.  Arguments   som : a trained SOM  data : Array or DataFrame with training data.   source  #  SOM.classFrequencies  \u2014  Function .  classFrequencies ( som::Som ,  data ,  classes )  Return a DataFrame with class frequencies for all neurons.  Arguments:   som : a trained SOM  data : data with row-wise samples and class information in each row  classes : Name of column with class information.   Data must have the same number of dimensions as the training dataset. The column with class labels is given as  classes  (name or index). Returned DataFrame has the columns:   X-, Y-indices and index: of winner neuron for every row in data  population: number of samples mapped to the neuron  frequencies: one column for each class label.   source",
            "title": "Training"
        },
        {
            "location": "/api/visualisations/",
            "text": "Visualisation\n\n\n#\n\n\nSOM.plotDensity\n \u2014 \nFunction\n.\n\n\nplotDensity\n(\nsom\n::\nSom\n;\n \npredict\n \n=\n \nnothing\n,\n\n            \ntitle\n \n=\n \n\"somPlot\"\n,\n \npaper\n \n=\n \n:\na4r\n,\n\n            \ncolormap\n \n=\n \n\"autumn_r\"\n,\n\n            \ndevice\n \n=\n \n:\ndisplay\n,\n \nfileName\n \n=\n \n\"somplot\"\n)\n\n\n\n\n\n\nPlot the population of neurons as colours.\n\n\nArguments:\n\n\n\n\nsom\n: the som of type \nSom\n; som is the only mandatory argument\n\n\npredict\n: DataFrame of mappings as outputed by winners()\n\n\ntitle\n: main title of plot\n\n\npaper\n: plot size; currentlx supported: \n:a4, :a4r, :letter, :letterr\n\n\ncolormap\n: MatPlotLib colourmap (Python-style as string \n\"gray\"\n or             Julia-style as Symbol \n:gray\n)\n\n\ndevice\n: one of \n:display, :png, :svg, :pdf\n or any file-type supported           by MatPlotLib; default is \n:display\n\n\nfileName\n: name of image file. File extention overrides the setting of             \ndevice\n.\n\n\n\n\nsource\n\n\n#\n\n\nSOM.plotClasses\n \u2014 \nFunction\n.\n\n\nplotClasses\n(\nsom\n::\nSom\n,\n \nfrequencies\n;\n\n            \ntitle\n \n=\n \n\"somPlot\"\n,\n \npaper\n \n=\n \n:\na4r\n,\n\n            \ncolormap\n \n=\n \n\"rainbow\"\n,\n\n            \ndevice\n \n=\n \n:\ndisplay\n,\n \nfileName\n \n=\n \n\"somplot\"\n)\n\n\n\n\n\n\nPlot the population of neurons as colours.\n\n\nArguments:\n\n\n\n\nsom\n: the som of type \nSom\n; som is the only mandatory argument\n\n\nfrequencies\n: DataFrame of frequencies as outputed by classFrequencies()\n\n\ntitle\n: main title of plot\n\n\npaper\n: plot size; currentlx supported: \n:a4, :a4r, :letter, :letterr\n\n\ncolors\n: MatPlotLib colourmap (Python-style as string \n\"gray\"\n or             Julia-style as Symbol \n:gray\n) \nor\n dictionary with             classes as keys and colours as vals; default: \nbrg\n\n\ndevice\n: one of \n:display, :png, :svg, :pdf\n or any file-type supported           by MatPlotLib; default is \n:display\n\n\nfileName\n: name of image file. File extention overrides the setting of             \ndevice\n.\n\n\n\n\nsource",
            "title": "Visualisation"
        },
        {
            "location": "/api/visualisations/#visualisation",
            "text": "#  SOM.plotDensity  \u2014  Function .  plotDensity ( som :: Som ;   predict   =   nothing , \n             title   =   \"somPlot\" ,   paper   =   : a4r , \n             colormap   =   \"autumn_r\" , \n             device   =   : display ,   fileName   =   \"somplot\" )   Plot the population of neurons as colours.  Arguments:   som : the som of type  Som ; som is the only mandatory argument  predict : DataFrame of mappings as outputed by winners()  title : main title of plot  paper : plot size; currentlx supported:  :a4, :a4r, :letter, :letterr  colormap : MatPlotLib colourmap (Python-style as string  \"gray\"  or             Julia-style as Symbol  :gray )  device : one of  :display, :png, :svg, :pdf  or any file-type supported           by MatPlotLib; default is  :display  fileName : name of image file. File extention overrides the setting of              device .   source  #  SOM.plotClasses  \u2014  Function .  plotClasses ( som :: Som ,   frequencies ; \n             title   =   \"somPlot\" ,   paper   =   : a4r , \n             colormap   =   \"rainbow\" , \n             device   =   : display ,   fileName   =   \"somplot\" )   Plot the population of neurons as colours.  Arguments:   som : the som of type  Som ; som is the only mandatory argument  frequencies : DataFrame of frequencies as outputed by classFrequencies()  title : main title of plot  paper : plot size; currentlx supported:  :a4, :a4r, :letter, :letterr  colors : MatPlotLib colourmap (Python-style as string  \"gray\"  or             Julia-style as Symbol  :gray )  or  dictionary with             classes as keys and colours as vals; default:  brg  device : one of  :display, :png, :svg, :pdf  or any file-type supported           by MatPlotLib; default is  :display  fileName : name of image file. File extention overrides the setting of              device .   source",
            "title": "Visualisation"
        }
    ]
}